datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  email      String     @unique
  username   String     @unique
  password   String
  name       String
  avatar     String?
  noWhatsApp String?
  role       String     @default("user")
  isReset    Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Platform   Platform[]
}

model UserPlatform {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  username   String   @unique
  password   String
  name       String
  avatar     String?
  noWhatsApp String?
  role       String   @default("user")
  isReset    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Platform {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  status         String           @default("active")
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Subscription   Subscription[]
  PlatformDetail PlatformDetail[]
  Testimoni      Testimoni[]
  Carousel       Carousel[]
  Info           Info[]
  Value          Value[]
  InfoDetail     InfoDetail[]
  Category       Category[]
  Product        Product[]
}

model PlatformDetail {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  platformId String   @db.ObjectId
  platform   Platform @relation(fields: [platformId], references: [id])
  logoUrl    String?
  faviconUrl String?
  instagram  String?
  facebook   String?
  twitter    String?
  youtube    String?
  noWhatsApp String?
  email      String?
  tiktok     String?
  line       String?
  tagline    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  platformId String   @db.ObjectId
  platform   Platform @relation(fields: [platformId], references: [id])
  levelId    String   @db.ObjectId
  level      Level    @relation(fields: [levelId], references: [id])
  status     String   @default("active")
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Level {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  status       String         @default("active")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Testimoni {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  avatar     String?
  content    String
  platformId String   @db.ObjectId
  platform   Platform @relation(fields: [platformId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Carousel {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  link       String?
  platform   Platform @relation(fields: [platformId], references: [id])
  platformId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Info {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  thumbnail  String
  platformId String       @db.ObjectId
  platform   Platform     @relation(fields: [platformId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  InfoDetail InfoDetail[]
}

model InfoDetail {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  imageUrl   String
  infoId     String   @db.ObjectId
  info       Info     @relation(fields: [infoId], references: [id])
  platformId String   @db.ObjectId
  platform   Platform @relation(fields: [platformId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Value {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  imageUrl   String
  platformId String   @db.ObjectId
  platform   Platform @relation(fields: [platformId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  platformId String   @db.ObjectId
  platform   Platform @relation(fields: [platformId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Int
  discount     Int?
  rating       Int?
  platformId   String         @db.ObjectId
  platform     Platform       @relation(fields: [platformId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductImage ProductImage[]
  ProductItems ProductItems[]
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItems {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  title       String
  description String
  imageUrl    String
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
